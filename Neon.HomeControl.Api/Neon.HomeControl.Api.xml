<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Neon.HomeControl.Api</name>
    </assembly>
    <members>
        <member name="T:Neon.HomeControl.Api.Annotations.CanBeNullAttribute">
            <summary>
                Indicates that the value of the marked element could be <c>null</c> sometimes,
                so checking for <c>null</c> is required before its usage.
            </summary>
            <example>
                <code>
            [CanBeNull] object Test() => null;
            
            void UseTest() {
              var p = Test();
              var s = p.ToString(); // Warning: Possible 'System.NullReferenceException'
            }
            </code>
            </example>
        </member>
        <member name="T:Neon.HomeControl.Api.Annotations.NotNullAttribute">
            <summary>
                Indicates that the value of the marked element can never be <c>null</c>.
            </summary>
            <example>
                <code>
            [NotNull] object Foo() {
              return null; // Warning: Possible 'null' assignment
            }
            </code>
            </example>
        </member>
        <member name="T:Neon.HomeControl.Api.Annotations.ItemNotNullAttribute">
            <summary>
                Can be applied to symbols of types derived from IEnumerable as well as to symbols of Task
                and Lazy classes to indicate that the value of a collection item, of the Task.Result property
                or of the Lazy.Value property can never be null.
            </summary>
            <example>
                <code>
            public void Foo([ItemNotNull]List&lt;string&gt; books)
            {
              foreach (var book in books) {
                if (book != null) // Warning: Expression is always true
                 Console.WriteLine(book.ToUpper());
              }
            }
            </code>
            </example>
        </member>
        <member name="T:Neon.HomeControl.Api.Annotations.ItemCanBeNullAttribute">
            <summary>
                Can be applied to symbols of types derived from IEnumerable as well as to symbols of Task
                and Lazy classes to indicate that the value of a collection item, of the Task.Result property
                or of the Lazy.Value property can be null.
            </summary>
            <example>
                <code>
            public void Foo([ItemCanBeNull]List&lt;string&gt; books)
            {
              foreach (var book in books)
              {
                // Warning: Possible 'System.NullReferenceException'
                Console.WriteLine(book.ToUpper());
              }
            }
            </code>
            </example>
        </member>
        <member name="T:Neon.HomeControl.Api.Annotations.StringFormatMethodAttribute">
            <summary>
                Indicates that the marked method builds string by the format pattern and (optional) arguments.
                The parameter, which contains the format string, should be given in constructor. The format string
                should be in <see cref="M:System.String.Format(System.IFormatProvider,System.String,System.Object[])" />-like form.
            </summary>
            <example>
                <code>
            [StringFormatMethod("message")]
            void ShowError(string message, params object[] args) { /* do something */ }
            
            void Foo() {
              ShowError("Failed: {0}"); // Warning: Non-existing argument in format string
            }
            </code>
            </example>
        </member>
        <member name="M:Neon.HomeControl.Api.Annotations.StringFormatMethodAttribute.#ctor(System.String)">
            <param name="formatParameterName">
                Specifies which parameter of an annotated method should be treated as the format string
            </param>
        </member>
        <member name="T:Neon.HomeControl.Api.Annotations.ValueProviderAttribute">
            <summary>
                Use this annotation to specify a type that contains static or const fields
                with values for the annotated property/field/parameter.
                The specified type will be used to improve completion suggestions.
            </summary>
            <example>
                <code>
            namespace TestNamespace
            {
              public class Constants
              {
                public static int INT_CONST = 1;
                public const string STRING_CONST = "1";
              }
            
              public class Class1
              {
                [ValueProvider("TestNamespace.Constants")] public int myField;
                public void Foo([ValueProvider("TestNamespace.Constants")] string str) { }
            
                public void Test()
                {
                  Foo(/*try completion here*/);//
                  myField = /*try completion here*/
                }
              }
            }
            </code>
            </example>
        </member>
        <member name="T:Neon.HomeControl.Api.Annotations.InvokerParameterNameAttribute">
            <summary>
                Indicates that the function argument should be a string literal and match one
                of the parameters of the caller function. For example, ReSharper annotates
                the parameter of <see cref="T:System.ArgumentNullException" />.
            </summary>
            <example>
                <code>
            void Foo(string param) {
              if (param == null)
                throw new ArgumentNullException("par"); // Warning: Cannot resolve symbol
            }
            </code>
            </example>
        </member>
        <member name="T:Neon.HomeControl.Api.Annotations.NotifyPropertyChangedInvocatorAttribute">
            <summary>
                Indicates that the method is contained in a type that implements
                <c>System.ComponentModel.INotifyPropertyChanged</c> interface and this method
                is used to notify that some property value changed.
            </summary>
            <remarks>
                The method should be non-static and conform to one of the supported signatures:
                <list>
                    <item>
                        <c>NotifyChanged(string)</c>
                    </item>
                    <item>
                        <c>NotifyChanged(params string[])</c>
                    </item>
                    <item>
                        <c>NotifyChanged{T}(Expression{Func{T}})</c>
                    </item>
                    <item>
                        <c>NotifyChanged{T,U}(Expression{Func{T,U}})</c>
                    </item>
                    <item>
                        <c>SetProperty{T}(ref T, T, string)</c>
                    </item>
                </list>
            </remarks>
            <example>
                <code>
            public class Foo : INotifyPropertyChanged {
              public event PropertyChangedEventHandler PropertyChanged;
            
              [NotifyPropertyChangedInvocator]
              protected virtual void NotifyChanged(string propertyName) { ... }
            
              string _name;
            
              public string Name {
                get { return _name; }
                set { _name = value; NotifyChanged("LastName"); /* Warning */ }
              }
            }
            </code>
                Examples of generated notifications:
                <list>
                    <item>
                        <c>NotifyChanged("Property")</c>
                    </item>
                    <item>
                        <c>NotifyChanged(() =&gt; Property)</c>
                    </item>
                    <item>
                        <c>NotifyChanged((VM x) =&gt; x.Property)</c>
                    </item>
                    <item>
                        <c>SetProperty(ref myField, value, "Property")</c>
                    </item>
                </list>
            </example>
        </member>
        <member name="T:Neon.HomeControl.Api.Annotations.ContractAnnotationAttribute">
            <summary>
                Describes dependency between method input and output.
            </summary>
            <syntax>
                <p>Function Definition Table syntax:</p>
                <list>
                    <item>FDT      ::= FDTRow [;FDTRow]*</item>
                    <item>FDTRow   ::= Input =&gt; Output | Output &lt;= Input</item>
                    <item>Input    ::= ParameterName: Value [, Input]*</item>
                    <item>Output   ::= [ParameterName: Value]* {halt|stop|void|nothing|Value}</item>
                    <item>Value    ::= true | false | null | notnull | canbenull</item>
                </list>
                If the method has a single input parameter, its name could be omitted.<br />
                Using <c>halt</c> (or <c>void</c>/<c>nothing</c>, which is the same) for the method output
                means that the method doesn't return normally (throws or terminates the process).<br />
                Value <c>canbenull</c> is only applicable for output parameters.<br />
                You can use multiple <c>[ContractAnnotation]</c> for each FDT row, or use single attribute
                with rows separated by semicolon. There is no notion of order rows, all rows are checked
                for applicability and applied per each program state tracked by the analysis engine.<br />
            </syntax>
            <examples>
                <list>
                    <item>
                        <code>
            [ContractAnnotation("=&gt; halt")]
            public void TerminationMethod()
            </code>
                    </item>
                    <item>
                        <code>
            [ContractAnnotation("null &lt;= param:null")] // reverse condition syntax
            public string GetName(string surname)
            </code>
                    </item>
                    <item>
                        <code>
            [ContractAnnotation("s:null =&gt; true")]
            public bool IsNullOrEmpty(string s) // string.IsNullOrEmpty()
            </code>
                    </item>
                    <item>
                        <code>
            // A method that returns null if the parameter is null,
            // and not null if the parameter is not null
            [ContractAnnotation("null =&gt; null; notnull =&gt; notnull")]
            public object Transform(object data)
            </code>
                    </item>
                    <item>
                        <code>
            [ContractAnnotation("=&gt; true, result: notnull; =&gt; false, result: null")]
            public bool TryParse(string s, out Person result)
            </code>
                    </item>
                </list>
            </examples>
        </member>
        <member name="T:Neon.HomeControl.Api.Annotations.LocalizationRequiredAttribute">
            <summary>
                Indicates whether the marked element should be localized.
            </summary>
            <example>
                <code>
            [LocalizationRequiredAttribute(true)]
            class Foo {
              string str = "my string"; // Warning: Localizable string
            }
            </code>
            </example>
        </member>
        <member name="T:Neon.HomeControl.Api.Annotations.CannotApplyEqualityOperatorAttribute">
            <summary>
                Indicates that the value of the marked type (or its derivatives)
                cannot be compared using '==' or '!=' operators and <c>Equals()</c>
                should be used instead. However, using '==' or '!=' for comparison
                with <c>null</c> is always permitted.
            </summary>
            <example>
                <code>
            [CannotApplyEqualityOperator]
            class NoEquality { }
            
            class UsesNoEquality {
              void Test() {
                var ca1 = new NoEquality();
                var ca2 = new NoEquality();
                if (ca1 != null) { // OK
                  bool condition = ca1 == ca2; // Warning
                }
              }
            }
            </code>
            </example>
        </member>
        <member name="T:Neon.HomeControl.Api.Annotations.BaseTypeRequiredAttribute">
            <summary>
                When applied to a target attribute, specifies a requirement for any type marked
                with the target attribute to implement or inherit specific type or types.
            </summary>
            <example>
                <code>
            [BaseTypeRequired(typeof(IComponent)] // Specify requirement
            class ComponentAttribute : Attribute { }
            
            [Component] // ComponentAttribute requires implementing IComponent interface
            class MyComponent : IComponent { }
            </code>
            </example>
        </member>
        <member name="T:Neon.HomeControl.Api.Annotations.UsedImplicitlyAttribute">
            <summary>
                Indicates that the marked symbol is used implicitly (e.g. via reflection, in external library),
                so this symbol will not be reported as unused (as well as by other usage inspections).
            </summary>
        </member>
        <member name="T:Neon.HomeControl.Api.Annotations.MeansImplicitUseAttribute">
            <summary>
                Can be applied to attributes, type parameters, and parameters of a type assignable from <see cref="T:System.Type" />
                .
                When applied to an attribute, the decorated attribute behaves the same as <see cref="T:Neon.HomeControl.Api.Annotations.UsedImplicitlyAttribute" />.
                When applied to a type parameter or to a parameter of type <see cref="T:System.Type" />,  indicates that the
                corresponding type
                is used implicitly.
            </summary>
        </member>
        <member name="T:Neon.HomeControl.Api.Annotations.ImplicitUseKindFlags">
            <summary>
                Specify the details of implicitly used symbol when it is marked
                with <see cref="T:Neon.HomeControl.Api.Annotations.MeansImplicitUseAttribute" /> or <see cref="T:Neon.HomeControl.Api.Annotations.UsedImplicitlyAttribute" />.
            </summary>
        </member>
        <member name="F:Neon.HomeControl.Api.Annotations.ImplicitUseKindFlags.Access">
            <summary>Only entity marked with attribute considered used.</summary>
        </member>
        <member name="F:Neon.HomeControl.Api.Annotations.ImplicitUseKindFlags.Assign">
            <summary>Indicates implicit assignment to a member.</summary>
        </member>
        <member name="F:Neon.HomeControl.Api.Annotations.ImplicitUseKindFlags.InstantiatedWithFixedConstructorSignature">
            <summary>
                Indicates implicit instantiation of a type with fixed constructor signature.
                That means any unused constructor parameters won't be reported as such.
            </summary>
        </member>
        <member name="F:Neon.HomeControl.Api.Annotations.ImplicitUseKindFlags.InstantiatedNoFixedConstructorSignature">
            <summary>Indicates implicit instantiation of a type.</summary>
        </member>
        <member name="T:Neon.HomeControl.Api.Annotations.ImplicitUseTargetFlags">
            <summary>
                Specify what is considered to be used implicitly when marked
                with <see cref="T:Neon.HomeControl.Api.Annotations.MeansImplicitUseAttribute" /> or <see cref="T:Neon.HomeControl.Api.Annotations.UsedImplicitlyAttribute" />.
            </summary>
        </member>
        <member name="F:Neon.HomeControl.Api.Annotations.ImplicitUseTargetFlags.Members">
            <summary>Members of entity marked with attribute are considered used.</summary>
        </member>
        <member name="F:Neon.HomeControl.Api.Annotations.ImplicitUseTargetFlags.WithMembers">
            <summary>Entity marked with attribute and all its members considered used.</summary>
        </member>
        <member name="T:Neon.HomeControl.Api.Annotations.PublicAPIAttribute">
            <summary>
                This attribute is intended to mark publicly available API
                which should not be removed and so is treated as used.
            </summary>
        </member>
        <member name="T:Neon.HomeControl.Api.Annotations.InstantHandleAttribute">
            <summary>
                Tells code analysis engine if the parameter is completely handled when the invoked method is on stack.
                If the parameter is a delegate, indicates that delegate is executed while the method is executed.
                If the parameter is an enumerable, indicates that it is enumerated while the method is executed.
            </summary>
        </member>
        <member name="T:Neon.HomeControl.Api.Annotations.PureAttribute">
            <summary>
                Indicates that a method does not make any observable state changes.
                The same as <c>System.Diagnostics.Contracts.PureAttribute</c>.
            </summary>
            <example>
                <code>
            [Pure] int Multiply(int x, int y) => x * y;
            
            void M() {
              Multiply(123, 42); // Waring: Return value of pure method is not used
            }
            </code>
            </example>
        </member>
        <member name="T:Neon.HomeControl.Api.Annotations.MustUseReturnValueAttribute">
            <summary>
                Indicates that the return value of the method invocation must be used.
            </summary>
            <remarks>
                Methods decorated with this attribute (in contrast to pure methods) might change state,
                but make no sense without using their return value. <br />
                Similarly to <see cref="T:Neon.HomeControl.Api.Annotations.PureAttribute" />, this attribute
                will help detecting usages of the method when the return value in not used.
                Additionally, you can optionally specify a custom message, which will be used when showing warnings, e.g.
                <code>[MustUseReturnValue("Use the return value to...")]</code>.
            </remarks>
        </member>
        <member name="T:Neon.HomeControl.Api.Annotations.ProvidesContextAttribute">
            <summary>
                Indicates the type member or parameter of some type, that should be used instead of all other ways
                to get the value of that type. This annotation is useful when you have some "context" value evaluated
                and stored somewhere, meaning that all other ways to get this value must be consolidated with existing one.
            </summary>
            <example>
                <code>
            class Foo {
              [ProvidesContext] IBarService _barService = ...;
            
              void ProcessNode(INode node) {
                DoSomething(node, node.GetGlobalServices().Bar);
                //              ^ Warning: use value of '_barService' field
              }
            }
            </code>
            </example>
        </member>
        <member name="T:Neon.HomeControl.Api.Annotations.PathReferenceAttribute">
            <summary>
                Indicates that a parameter is a path to a file or a folder within a web project.
                Path can be relative or absolute, starting from web root (~).
            </summary>
        </member>
        <member name="T:Neon.HomeControl.Api.Annotations.SourceTemplateAttribute">
            <summary>
                An extension method marked with this attribute is processed by code completion
                as a 'Source Template'. When the extension method is completed over some expression, its source code
                is automatically expanded like a template at call site.
            </summary>
            <remarks>
                Template method body can contain valid source code and/or special comments starting with '$'.
                Text inside these comments is added as source code when the template is applied. Template parameters
                can be used either as additional method parameters or as identifiers wrapped in two '$' signs.
                Use the <see cref="T:Neon.HomeControl.Api.Annotations.MacroAttribute" /> attribute to specify macros for parameters.
            </remarks>
            <example>
                In this example, the 'forEach' method is a source template available over all values
                of enumerable types, producing ordinary C# 'foreach' statement and placing caret inside block:
                <code>
            [SourceTemplate]
            public static void forEach&lt;T&gt;(this IEnumerable&lt;T&gt; xs) {
              foreach (var x in xs) {
                 //$ $END$
              }
            }
            </code>
            </example>
        </member>
        <member name="T:Neon.HomeControl.Api.Annotations.MacroAttribute">
            <summary>
                Allows specifying a macro for a parameter of a <see cref="T:Neon.HomeControl.Api.Annotations.SourceTemplateAttribute">source template</see>.
            </summary>
            <remarks>
                You can apply the attribute on the whole method or on any of its additional parameters. The macro expression
                is defined in the <see cref="P:Neon.HomeControl.Api.Annotations.MacroAttribute.Expression" /> property. When applied on a method, the target
                template parameter is defined in the <see cref="P:Neon.HomeControl.Api.Annotations.MacroAttribute.Target" /> property. To apply the macro silently
                for the parameter, set the <see cref="P:Neon.HomeControl.Api.Annotations.MacroAttribute.Editable" /> property value = -1.
            </remarks>
            <example>
                Applying the attribute on a source template method:
                <code>
            [SourceTemplate, Macro(Target = "item", Expression = "suggestVariableName()")]
            public static void forEach&lt;T&gt;(this IEnumerable&lt;T&gt; collection) {
              foreach (var item in collection) {
                //$ $END$
              }
            }
            </code>
                Applying the attribute on a template method parameter:
                <code>
            [SourceTemplate]
            public static void something(this Entity x, [Macro(Expression = "guid()", Editable = -1)] string newguid) {
              /*$ var $x$Id = "$newguid$" + x.ToString();
              x.DoSomething($x$Id); */
            }
            </code>
            </example>
        </member>
        <member name="P:Neon.HomeControl.Api.Annotations.MacroAttribute.Expression">
            <summary>
                Allows specifying a macro that will be executed for a <see cref="T:Neon.HomeControl.Api.Annotations.SourceTemplateAttribute">source template</see>
                parameter when the template is expanded.
            </summary>
        </member>
        <member name="P:Neon.HomeControl.Api.Annotations.MacroAttribute.Editable">
            <summary>
                Allows specifying which occurrence of the target parameter becomes editable when the template is deployed.
            </summary>
            <remarks>
                If the target parameter is used several times in the template, only one occurrence becomes editable;
                other occurrences are changed synchronously. To specify the zero-based index of the editable occurrence,
                use values >= 0. To make the parameter non-editable when the template is expanded, use -1.
            </remarks>
        </member>
        <member name="P:Neon.HomeControl.Api.Annotations.MacroAttribute.Target">
            <summary>
                Identifies the target parameter of a <see cref="T:Neon.HomeControl.Api.Annotations.SourceTemplateAttribute">source template</see> if the
                <see cref="T:Neon.HomeControl.Api.Annotations.MacroAttribute" /> is applied on a template method.
            </summary>
        </member>
        <member name="T:Neon.HomeControl.Api.Annotations.AspMvcActionAttribute">
            <summary>
                ASP.NET MVC attribute. If applied to a parameter, indicates that the parameter
                is an MVC action. If applied to a method, the MVC action name is calculated
                implicitly from the context. Use this attribute for custom wrappers similar to
                <c>System.Web.Mvc.Html.ChildActionExtensions.RenderAction(HtmlHelper, String)</c>.
            </summary>
        </member>
        <member name="T:Neon.HomeControl.Api.Annotations.AspMvcAreaAttribute">
            <summary>
                ASP.NET MVC attribute. Indicates that the marked parameter is an MVC area.
                Use this attribute for custom wrappers similar to
                <c>System.Web.Mvc.Html.ChildActionExtensions.RenderAction(HtmlHelper, String)</c>.
            </summary>
        </member>
        <member name="T:Neon.HomeControl.Api.Annotations.AspMvcControllerAttribute">
            <summary>
                ASP.NET MVC attribute. If applied to a parameter, indicates that the parameter is
                an MVC controller. If applied to a method, the MVC controller name is calculated
                implicitly from the context. Use this attribute for custom wrappers similar to
                <c>System.Web.Mvc.Html.ChildActionExtensions.RenderAction(HtmlHelper, String, String)</c>.
            </summary>
        </member>
        <member name="T:Neon.HomeControl.Api.Annotations.AspMvcMasterAttribute">
            <summary>
                ASP.NET MVC attribute. Indicates that the marked parameter is an MVC Master. Use this attribute
                for custom wrappers similar to <c>System.Web.Mvc.Controller.View(String, String)</c>.
            </summary>
        </member>
        <member name="T:Neon.HomeControl.Api.Annotations.AspMvcModelTypeAttribute">
            <summary>
                ASP.NET MVC attribute. Indicates that the marked parameter is an MVC model type. Use this attribute
                for custom wrappers similar to <c>System.Web.Mvc.Controller.View(String, Object)</c>.
            </summary>
        </member>
        <member name="T:Neon.HomeControl.Api.Annotations.AspMvcPartialViewAttribute">
            <summary>
                ASP.NET MVC attribute. If applied to a parameter, indicates that the parameter is an MVC
                partial view. If applied to a method, the MVC partial view name is calculated implicitly
                from the context. Use this attribute for custom wrappers similar to
                <c>System.Web.Mvc.Html.RenderPartialExtensions.RenderPartial(HtmlHelper, String)</c>.
            </summary>
        </member>
        <member name="T:Neon.HomeControl.Api.Annotations.AspMvcSuppressViewErrorAttribute">
            <summary>
                ASP.NET MVC attribute. Allows disabling inspections for MVC views within a class or a method.
            </summary>
        </member>
        <member name="T:Neon.HomeControl.Api.Annotations.AspMvcDisplayTemplateAttribute">
            <summary>
                ASP.NET MVC attribute. Indicates that a parameter is an MVC display template.
                Use this attribute for custom wrappers similar to
                <c>System.Web.Mvc.Html.DisplayExtensions.DisplayForModel(HtmlHelper, String)</c>.
            </summary>
        </member>
        <member name="T:Neon.HomeControl.Api.Annotations.AspMvcEditorTemplateAttribute">
            <summary>
                ASP.NET MVC attribute. Indicates that the marked parameter is an MVC editor template.
                Use this attribute for custom wrappers similar to
                <c>System.Web.Mvc.Html.EditorExtensions.EditorForModel(HtmlHelper, String)</c>.
            </summary>
        </member>
        <member name="T:Neon.HomeControl.Api.Annotations.AspMvcTemplateAttribute">
            <summary>
                ASP.NET MVC attribute. Indicates that the marked parameter is an MVC template.
                Use this attribute for custom wrappers similar to
                <c>System.ComponentModel.DataAnnotations.UIHintAttribute(System.String)</c>.
            </summary>
        </member>
        <member name="T:Neon.HomeControl.Api.Annotations.AspMvcViewAttribute">
            <summary>
                ASP.NET MVC attribute. If applied to a parameter, indicates that the parameter
                is an MVC view component. If applied to a method, the MVC view name is calculated implicitly
                from the context. Use this attribute for custom wrappers similar to
                <c>System.Web.Mvc.Controller.View(Object)</c>.
            </summary>
        </member>
        <member name="T:Neon.HomeControl.Api.Annotations.AspMvcViewComponentAttribute">
            <summary>
                ASP.NET MVC attribute. If applied to a parameter, indicates that the parameter
                is an MVC view component name.
            </summary>
        </member>
        <member name="T:Neon.HomeControl.Api.Annotations.AspMvcViewComponentViewAttribute">
            <summary>
                ASP.NET MVC attribute. If applied to a parameter, indicates that the parameter
                is an MVC view component view. If applied to a method, the MVC view component view name is default.
            </summary>
        </member>
        <member name="T:Neon.HomeControl.Api.Annotations.AspMvcActionSelectorAttribute">
            <summary>
                ASP.NET MVC attribute. When applied to a parameter of an attribute,
                indicates that this parameter is an MVC action name.
            </summary>
            <example>
                <code>
            [ActionName("Foo")]
            public ActionResult Login(string returnUrl) {
              ViewBag.ReturnUrl = Url.Action("Foo"); // OK
              return RedirectToAction("Bar"); // Error: Cannot resolve action
            }
            </code>
            </example>
        </member>
        <member name="T:Neon.HomeControl.Api.Annotations.RazorSectionAttribute">
            <summary>
                Razor attribute. Indicates that the marked parameter or method is a Razor section.
                Use this attribute for custom wrappers similar to
                <c>System.Web.WebPages.WebPageBase.RenderSection(String)</c>.
            </summary>
        </member>
        <member name="T:Neon.HomeControl.Api.Annotations.CollectionAccessAttribute">
            <summary>
                Indicates how method, constructor invocation, or property access
                over collection type affects the contents of the collection.
                Use <see cref="P:Neon.HomeControl.Api.Annotations.CollectionAccessAttribute.CollectionAccessType" /> to specify the access type.
            </summary>
            <remarks>
                Using this attribute only makes sense if all collection methods are marked with this attribute.
            </remarks>
            <example>
                <code>
            public class MyStringCollection : List&lt;string&gt;
            {
              [CollectionAccess(CollectionAccessType.Read)]
              public string GetFirstString()
              {
                return this.ElementAt(0);
              }
            }
            class Test
            {
              public void Foo()
              {
                // Warning: Contents of the collection is never updated
                var col = new MyStringCollection();
                string x = col.GetFirstString();
              }
            }
            </code>
            </example>
        </member>
        <member name="T:Neon.HomeControl.Api.Annotations.CollectionAccessType">
            <summary>
                Provides a value for the <see cref="T:Neon.HomeControl.Api.Annotations.CollectionAccessAttribute" /> to define
                how the collection method invocation affects the contents of the collection.
            </summary>
        </member>
        <member name="F:Neon.HomeControl.Api.Annotations.CollectionAccessType.None">
            <summary>Method does not use or modify content of the collection.</summary>
        </member>
        <member name="F:Neon.HomeControl.Api.Annotations.CollectionAccessType.Read">
            <summary>Method only reads content of the collection but does not modify it.</summary>
        </member>
        <member name="F:Neon.HomeControl.Api.Annotations.CollectionAccessType.ModifyExistingContent">
            <summary>Method can change content of the collection but does not add new elements.</summary>
        </member>
        <member name="F:Neon.HomeControl.Api.Annotations.CollectionAccessType.UpdatedContent">
            <summary>Method can add new elements to the collection.</summary>
        </member>
        <member name="T:Neon.HomeControl.Api.Annotations.AssertionMethodAttribute">
            <summary>
                Indicates that the marked method is assertion method, i.e. it halts the control flow if
                one of the conditions is satisfied. To set the condition, mark one of the parameters with
                <see cref="T:Neon.HomeControl.Api.Annotations.AssertionConditionAttribute" /> attribute.
            </summary>
        </member>
        <member name="T:Neon.HomeControl.Api.Annotations.AssertionConditionAttribute">
            <summary>
                Indicates the condition parameter of the assertion method. The method itself should be
                marked by <see cref="T:Neon.HomeControl.Api.Annotations.AssertionMethodAttribute" /> attribute. The mandatory argument of
                the attribute is the assertion type.
            </summary>
        </member>
        <member name="T:Neon.HomeControl.Api.Annotations.AssertionConditionType">
            <summary>
                Specifies assertion type. If the assertion method argument satisfies the condition,
                then the execution continues. Otherwise, execution is assumed to be halted.
            </summary>
        </member>
        <member name="F:Neon.HomeControl.Api.Annotations.AssertionConditionType.IS_TRUE">
            <summary>Marked parameter should be evaluated to true.</summary>
        </member>
        <member name="F:Neon.HomeControl.Api.Annotations.AssertionConditionType.IS_FALSE">
            <summary>Marked parameter should be evaluated to false.</summary>
        </member>
        <member name="F:Neon.HomeControl.Api.Annotations.AssertionConditionType.IS_NULL">
            <summary>Marked parameter should be evaluated to null value.</summary>
        </member>
        <member name="F:Neon.HomeControl.Api.Annotations.AssertionConditionType.IS_NOT_NULL">
            <summary>Marked parameter should be evaluated to not null value.</summary>
        </member>
        <member name="T:Neon.HomeControl.Api.Annotations.TerminatesProgramAttribute">
            <summary>
                Indicates that the marked method unconditionally terminates control flow execution.
                For example, it could unconditionally throw exception.
            </summary>
        </member>
        <member name="T:Neon.HomeControl.Api.Annotations.LinqTunnelAttribute">
            <summary>
                Indicates that method is pure LINQ method, with postponed enumeration (like Enumerable.Select,
                .Where). This annotation allows inference of [InstantHandle] annotation for parameters
                of delegate type by analyzing LINQ method chains.
            </summary>
        </member>
        <member name="T:Neon.HomeControl.Api.Annotations.NoEnumerationAttribute">
            <summary>
                Indicates that IEnumerable passed as a parameter is not enumerated.
                Use this annotation to suppress the 'Possible multiple enumeration of IEnumerable' inspection.
            </summary>
            <example>
                <code>
            static void ThrowIfNull&lt;T&gt;([NoEnumeration] T v, string n) where T : class
            {
              // custom check for null but no enumeration
            }
            
            void Foo(IEnumerable&lt;string&gt; values)
            {
              ThrowIfNull(values, nameof(values));
              var x = values.ToList(); // No warnings about multiple enumeration
            }
            </code>
            </example>
        </member>
        <member name="T:Neon.HomeControl.Api.Annotations.RegexPatternAttribute">
            <summary>
                Indicates that the marked parameter is a regular expression pattern.
            </summary>
        </member>
        <member name="T:Neon.HomeControl.Api.Annotations.NoReorderAttribute">
            <summary>
                Prevents the Member Reordering feature from tossing members of the marked class.
            </summary>
            <remarks>
                The attribute must be mentioned in your member reordering patterns.
            </remarks>
        </member>
        <member name="T:Neon.HomeControl.Api.Annotations.XamlItemsControlAttribute">
            <summary>
                XAML attribute. Indicates the type that has <c>ItemsSource</c> property and should be treated
                as <c>ItemsControl</c>-derived type, to enable inner items <c>DataContext</c> type resolve.
            </summary>
        </member>
        <member name="T:Neon.HomeControl.Api.Annotations.XamlItemBindingOfItemsControlAttribute">
            <summary>
                XAML attribute. Indicates the property of some <c>BindingBase</c>-derived type, that
                is used to bind some item of <c>ItemsControl</c>-derived type. This annotation will
                enable the <c>DataContext</c> type resolve for XAML bindings for such properties.
            </summary>
            <remarks>
                Property should have the tree ancestor of the <c>ItemsControl</c> type or
                marked with the <see cref="T:Neon.HomeControl.Api.Annotations.XamlItemsControlAttribute" /> attribute.
            </remarks>
        </member>
        <member name="T:Neon.HomeControl.Api.Core.Attributes.Commands.IotCommandAttribute">
            <summary>
            Command attribute for dispatch to components commands
            </summary>
        </member>
        <member name="P:Neon.HomeControl.Api.Core.Attributes.Commands.IotCommandAttribute.CommandName">
            <summary>
            Command name
            </summary>
        </member>
        <member name="P:Neon.HomeControl.Api.Core.Attributes.Commands.IotCommandAttribute.Description">
            <summary>
            Command description
            </summary>
        </member>
        <member name="P:Neon.HomeControl.Api.Core.Attributes.Commands.IotCommandAttribute.EntityType">
            <summary>
            Entity Type
            </summary>
        </member>
        <member name="M:Neon.HomeControl.Api.Core.Attributes.Commands.IotCommandAttribute.#ctor(System.String,System.Type,System.String)">
            <summary>
            ctor
            </summary>
            <param name="commandName"></param>
            <param name="entityType"></param>
            <param name="description"></param>
            <param name="args"></param>
        </member>
        <member name="P:Neon.HomeControl.Api.Core.Attributes.Commands.IotCommandParamAttribute.Name">
            <summary>
            Name of param
            </summary>
        </member>
        <member name="P:Neon.HomeControl.Api.Core.Attributes.Commands.IotCommandParamAttribute.IsRequired">
            <summary>
            If is required
            </summary>
        </member>
        <member name="M:Neon.HomeControl.Api.Core.Attributes.Commands.IotCommandParamAttribute.#ctor(System.String,System.Boolean)">
            <summary>
            Ctor
            </summary>
            <param name="name"></param>
            <param name="isRequired"></param>
        </member>
        <member name="T:Neon.HomeControl.Api.Core.Attributes.Components.ComponentAttribute">
            <summary>
                Attribute for the implementation of the components
            </summary>
        </member>
        <member name="M:Neon.HomeControl.Api.Core.Attributes.Components.ComponentAttribute.#ctor(System.String,System.String,System.String,System.String,System.String,System.Type)">
            <summary>
                Ctor
            </summary>
            <param name="name">Name of component</param>
            <param name="version">Version of component</param>
            <param name="category">Category (LIGHTS, MUSIC, HOME_AUTOMATION)</param>
            <param name="description">Describes what the component does</param>
            <param name="componentConfigType">Type of Config</param>
        </member>
        <member name="P:Neon.HomeControl.Api.Core.Attributes.Components.ComponentAttribute.Id">
            <summary>
            Id of component (philip_hue, ecc..)
            </summary>
        </member>
        <member name="P:Neon.HomeControl.Api.Core.Attributes.Components.ComponentAttribute.Name">
            <summary>
                Name of components
            </summary>
        </member>
        <member name="P:Neon.HomeControl.Api.Core.Attributes.Components.ComponentAttribute.Version">
            <summary>
                Version of component
            </summary>
        </member>
        <member name="P:Neon.HomeControl.Api.Core.Attributes.Components.ComponentAttribute.Category">
            <summary>
                Category of component
            </summary>
        </member>
        <member name="P:Neon.HomeControl.Api.Core.Attributes.Components.ComponentAttribute.Description">
            <summary>
                Description of component
            </summary>
        </member>
        <member name="P:Neon.HomeControl.Api.Core.Attributes.Components.ComponentAttribute.ComponentConfigType">
            <summary>
                Type of config
            </summary>
        </member>
        <member name="T:Neon.HomeControl.Api.Core.Attributes.Database.DatabaseSeedAttribute">
            <summary>
                Seeds are classes for initializing default data in the database
            </summary>
        </member>
        <member name="T:Neon.HomeControl.Api.Core.Attributes.Database.NoSqlConnectorAttribute">
            <summary>
            Attribute for NoSQL connector
            </summary>
        </member>
        <member name="P:Neon.HomeControl.Api.Core.Attributes.Database.NoSqlConnectorAttribute.Name">
            <summary>
            Name of connector
            </summary>
        </member>
        <member name="M:Neon.HomeControl.Api.Core.Attributes.Database.NoSqlConnectorAttribute.#ctor(System.String)">
            <summary>
            ctor	
            </summary>
            <param name="connectorName"></param>
        </member>
        <member name="T:Neon.HomeControl.Api.Core.Attributes.Dto.DtoMapAttribute">
            <summary>
                Attribute for mapping entities and DTOs
            </summary>
        </member>
        <member name="M:Neon.HomeControl.Api.Core.Attributes.Dto.DtoMapAttribute.#ctor(System.Type)">
            <summary>
                DB Entity
            </summary>
            <param name="entityType"></param>
        </member>
        <member name="P:Neon.HomeControl.Api.Core.Attributes.Dto.DtoMapAttribute.EntityType">
            <summary>
                DB Entity
            </summary>
        </member>
        <member name="T:Neon.HomeControl.Api.Core.Attributes.EventDatabase.EventDatabaseEntityAttribute">
            <summary>
                Attribute for mapping event entities. It is necessary to specify the name of the collection to be saved on the
                database
            </summary>
        </member>
        <member name="M:Neon.HomeControl.Api.Core.Attributes.EventDatabase.EventDatabaseEntityAttribute.#ctor(System.String)">
            <summary>
                Initialize new attribute with name of collection
            </summary>
            <param name="collectionName">Example: weather</param>
        </member>
        <member name="P:Neon.HomeControl.Api.Core.Attributes.EventDatabase.EventDatabaseEntityAttribute.CollectionName">
            <summary>
                Name of collection in database
            </summary>
        </member>
        <member name="T:Neon.HomeControl.Api.Core.Attributes.EventDatabase.EventDatabaseIndexAttribute">
            <summary>
                Attribute for creating indexes on the event database
            </summary>
        </member>
        <member name="M:Neon.HomeControl.Api.Core.Attributes.EventDatabase.EventDatabaseIndexAttribute.#ctor(System.Boolean)">
            <summary>
                Create new attribute
            </summary>
            <param name="unique"></param>
        </member>
        <member name="P:Neon.HomeControl.Api.Core.Attributes.EventDatabase.EventDatabaseIndexAttribute.Unique">
            <summary>
                Is True if the Index if unique
            </summary>
        </member>
        <member name="T:Neon.HomeControl.Api.Core.Attributes.IoT.IgnorePropertyCompareAttribute">
            <summary>
                Attribute for ignore
            </summary>
        </member>
        <member name="T:Neon.HomeControl.Api.Core.Attributes.OAuth.OAuthProviderAttribute">
            <summary>
                Attribute to create a callback during the oauth process
            </summary>
        </member>
        <member name="M:Neon.HomeControl.Api.Core.Attributes.OAuth.OAuthProviderAttribute.#ctor(System.String)">
            <summary>
                ctor with name of OAuth provider
            </summary>
            <param name="name">Ex: Spotify, Facebook, ecc...</param>
        </member>
        <member name="P:Neon.HomeControl.Api.Core.Attributes.OAuth.OAuthProviderAttribute.Name">
            <summary>
                Name of Provider
            </summary>
        </member>
        <member name="T:Neon.HomeControl.Api.Core.Attributes.Plugins.PluginAttribute">
            <summary>
                Attribute for creating plugins
            </summary>
        </member>
        <member name="M:Neon.HomeControl.Api.Core.Attributes.Plugins.PluginAttribute.#ctor(System.String,System.String,System.String,System.String)">
            <summary>
                Attribute for creating plugins
            </summary>
            <param name="name">Ex: My Plugin</param>
            <param name="category">Ex: MISC</param>
            <param name="version">Ex: v1.0</param>
            <param name="author">Ex: tgiachi</param>
        </member>
        <member name="P:Neon.HomeControl.Api.Core.Attributes.Plugins.PluginAttribute.Name">
            <summary>
                Name of plugin
            </summary>
        </member>
        <member name="P:Neon.HomeControl.Api.Core.Attributes.Plugins.PluginAttribute.Category">
            <summary>
                Category of plugin
            </summary>
        </member>
        <member name="P:Neon.HomeControl.Api.Core.Attributes.Plugins.PluginAttribute.Version">
            <summary>
                Version of plugin
            </summary>
        </member>
        <member name="P:Neon.HomeControl.Api.Core.Attributes.Plugins.PluginAttribute.Author">
            <summary>
                Author of plugin
            </summary>
        </member>
        <member name="P:Neon.HomeControl.Api.Core.Attributes.Plugins.PluginAttribute.Dependencies">
            <summary>
                If Plugin have dependencies of plugins
            </summary>
        </member>
        <member name="T:Neon.HomeControl.Api.Core.Attributes.SchedulerJob.SchedulerJobTaskAttribute">
            <summary>
                Attribute for creating scheduled actions
            </summary>
        </member>
        <member name="M:Neon.HomeControl.Api.Core.Attributes.SchedulerJob.SchedulerJobTaskAttribute.#ctor(System.Boolean,System.Int32)">
            <summary>
                Attribute for creating scheduled actions
            </summary>
            <param name="startNow">If True, of starts execute job</param>
            <param name="seconds">Number of seconds</param>
        </member>
        <member name="P:Neon.HomeControl.Api.Core.Attributes.SchedulerJob.SchedulerJobTaskAttribute.StartNow">
            <summary>
                If True, of starts execute job
            </summary>
        </member>
        <member name="P:Neon.HomeControl.Api.Core.Attributes.SchedulerJob.SchedulerJobTaskAttribute.Seconds">
            <summary>
                Number of secondse
            </summary>
        </member>
        <member name="T:Neon.HomeControl.Api.Core.Attributes.ScriptEngine.ScriptEngineAttribute">
            <summary>
            Script Engine Attribute
            </summary>
        </member>
        <member name="P:Neon.HomeControl.Api.Core.Attributes.ScriptEngine.ScriptEngineAttribute.Name">
            <summary>
            Name of Script Engine
            </summary>
        </member>
        <member name="P:Neon.HomeControl.Api.Core.Attributes.ScriptEngine.ScriptEngineAttribute.Version">
            <summary>
            Version
            </summary>
        </member>
        <member name="P:Neon.HomeControl.Api.Core.Attributes.ScriptEngine.ScriptEngineAttribute.FileExtension">
            <summary>
            Extension of file to read
            </summary>
        </member>
        <member name="M:Neon.HomeControl.Api.Core.Attributes.ScriptEngine.ScriptEngineAttribute.#ctor(System.String,System.String,System.String)">
            <summary>
            Ctor
            </summary>
        </member>
        <member name="P:Neon.HomeControl.Api.Core.Attributes.ScriptService.ScriptObjectAttribute.ObjName">
            <summary>
            Object name in script engine (ex: logger.log_info())
            </summary>
        </member>
        <member name="T:Neon.HomeControl.Api.Core.Data.Commands.IotCommand`1">
            <summary>
            Command to send to devices
            </summary>
        </member>
        <member name="P:Neon.HomeControl.Api.Core.Data.Commands.IotCommand`1.Entity">
            <summary>
            Entity
            </summary>
        </member>
        <member name="P:Neon.HomeControl.Api.Core.Data.Commands.IotCommand`1.CommandName">
            <summary>
            Command name
            </summary>
        </member>
        <member name="P:Neon.HomeControl.Api.Core.Data.Commands.IotCommand`1.Parameters">
            <summary>
            Command Parameters
            </summary>
        </member>
        <member name="M:Neon.HomeControl.Api.Core.Data.Commands.IotCommand`1.BuildCommand``1(``0,System.String,System.Object[])">
            <summary>
            Helper for build command
            </summary>
            <param name="entity"></param>
            <param name="commandName"></param>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="T:Neon.HomeControl.Api.Core.Data.Config.ComponentConfig">
            <summary>
            Components config
            </summary>
        </member>
        <member name="P:Neon.HomeControl.Api.Core.Data.Config.ComponentConfig.ConfigDirectory">
            <summary>
            Where Neon Load/Save component's config
            </summary>
        </member>
        <member name="M:Neon.HomeControl.Api.Core.Data.Config.ComponentConfig.#ctor">
            <summary>
            Default component config if Components
            </summary>
        </member>
        <member name="T:Neon.HomeControl.Api.Core.Data.Config.DatabaseConfig">
            <summary>
            Internal Database config
            </summary>
        </member>
        <member name="P:Neon.HomeControl.Api.Core.Data.Config.DatabaseConfig.ConnectionString">
            <summary>
            SqLite file 
            </summary>
        </member>
        <member name="M:Neon.HomeControl.Api.Core.Data.Config.DatabaseConfig.#ctor">
            <summary>
            Default Connection string is Neon.HomeControl.sqlite
            </summary>
        </member>
        <member name="P:Neon.HomeControl.Api.Core.Data.Config.MqttConfig.RunEmbedded">
            <summary>
            If true start local Mqtt Server
            </summary>
        </member>
        <member name="T:Neon.HomeControl.Api.Core.Data.Config.NeonConfig">
            <summary>
            Neon System config 
            </summary>
        </member>
        <member name="P:Neon.HomeControl.Api.Core.Data.Config.NeonConfig.Home">
            <summary>
            Information about home (GPS coordinates)
            </summary>
        </member>
        <member name="P:Neon.HomeControl.Api.Core.Data.Config.NeonConfig.Plugins">
            <summary>
            Plugins System Configuration
            </summary>
        </member>
        <member name="P:Neon.HomeControl.Api.Core.Data.Config.NeonConfig.JwtToken">
            <summary>
            Jwt Secret key for generate JWT Token
            </summary>
        </member>
        <member name="P:Neon.HomeControl.Api.Core.Data.Config.NeonConfig.Mqtt">
            <summary>
            MQTT Server information
            </summary>
        </member>
        <member name="P:Neon.HomeControl.Api.Core.Data.Config.NeonConfig.EnableMetrics">
            <summary>
            Expose application metrics
            </summary>
        </member>
        <member name="P:Neon.HomeControl.Api.Core.Data.Config.NeonConfig.EnableSwagger">
            <summary>
            Expose API information with swagger
            </summary>
        </member>
        <member name="P:Neon.HomeControl.Api.Core.Data.Config.NeonConfig.AutoLoadComponents">
            <summary>
            If true, load all components
            </summary>
        </member>
        <member name="P:Neon.HomeControl.Api.Core.Data.Config.NeonConfig.DatabaseDirectory">
            <summary>
            Database directory
            </summary>
        </member>
        <member name="T:Neon.HomeControl.Api.Core.Data.Config.ScriptConfig">
            <summary>
            Config for <see cref="T:Neon.HomeControl.Api.Core.Interfaces.Services.IScriptService"/> Script Service
            </summary>
        </member>
        <member name="P:Neon.HomeControl.Api.Core.Data.Config.ScriptConfig.Directory">
            <summary>
            Directory where script is located
            </summary>
        </member>
        <member name="T:Neon.HomeControl.Api.Core.Data.PropertyChange.BasePropertyChangedEntity">
            <summary>
                Implementation of Property Change Entity
            </summary>
        </member>
        <member name="E:Neon.HomeControl.Api.Core.Data.PropertyChange.BasePropertyChangedEntity.PropertyChanged">
            <summary>
                Event for track property Changed
            </summary>
        </member>
        <member name="T:Neon.HomeControl.Api.Core.Data.ScriptData.ScriptFunctionData">
            <summary>
            Class for describe C# to script engine function
            </summary>
        </member>
        <member name="P:Neon.HomeControl.Api.Core.Data.ScriptData.ScriptFunctionData.Name">
            <summary>
            Name of function
            </summary>
        </member>
        <member name="P:Neon.HomeControl.Api.Core.Data.ScriptData.ScriptFunctionData.Args">
            <summary>
            Parameters
            </summary>
        </member>
        <member name="P:Neon.HomeControl.Api.Core.Data.ScriptData.ScriptFunctionData.Category">
            <summary>
            Category of function (Ex: Logger)
            </summary>
        </member>
        <member name="P:Neon.HomeControl.Api.Core.Data.ScriptData.ScriptFunctionData.Help">
            <summary>
            Help text for describe function
            </summary>
        </member>
        <member name="T:Neon.HomeControl.Api.Core.Enums.ComponentStatusEnum">
            <summary>
                Component status enum
            </summary>
        </member>
        <member name="F:Neon.HomeControl.Api.Core.Enums.ComponentStatusEnum.STOPPED">
            <summary>
                Component is Stopped
            </summary>
        </member>
        <member name="F:Neon.HomeControl.Api.Core.Enums.ComponentStatusEnum.STARTED">
            <summary>
                Component is Started
            </summary>
        </member>
        <member name="F:Neon.HomeControl.Api.Core.Enums.ComponentStatusEnum.CONFIGURATION_ERROR">
            <summary>
                Component have configuration Error
            </summary>
        </member>
        <member name="F:Neon.HomeControl.Api.Core.Enums.ComponentStatusEnum.ERROR">
            <summary>
                Component have generic error
            </summary>
        </member>
        <member name="T:Neon.HomeControl.Api.Core.Enums.SchedulerServicePollingEnum">
            <summary>
                Enum for choose polling timer
            </summary>
        </member>
        <member name="T:Neon.HomeControl.Api.Core.Events.System.ServiceLoadedEvent">
            <summary>
            System event triggered when services manager loaded all service
            </summary>
        </member>
        <member name="M:Neon.HomeControl.Api.Core.Interfaces.Components.IComponent.Start">
            <summary>
            Start component
            </summary>
            <returns></returns>
        </member>
        <member name="M:Neon.HomeControl.Api.Core.Interfaces.Components.IComponent.Stop">
            <summary>
            Stop component
            </summary>
            <returns></returns>
        </member>
        <member name="M:Neon.HomeControl.Api.Core.Interfaces.Components.IComponent.InitConfiguration(System.Object)">
            <summary>
            Send to component the configuration
            </summary>
            <param name="config"></param>
            <returns></returns>
        </member>
        <member name="M:Neon.HomeControl.Api.Core.Interfaces.Components.IComponent.GetDefaultConfig">
            <summary>
            If configuration is empty send default config
            </summary>
            <returns></returns>
        </member>
        <member name="T:Neon.HomeControl.Api.Core.Interfaces.Database.INoSqlConnector">
            <summary>
            Interface for No SQL database
            </summary>
        </member>
        <member name="T:Neon.HomeControl.Api.Core.Interfaces.IDtoMapper`2">
            <summary>
            Interface for create DTO Mapper
            </summary>
            <typeparam name="TEntity"></typeparam>
            <typeparam name="TDto"></typeparam>
        </member>
        <member name="M:Neon.HomeControl.Api.Core.Interfaces.IDtoMapper`2.ToDto(System.Collections.Generic.List{`0})">
            <summary>
            Transform list of entities in DTOs
            </summary>
            <param name="entities"></param>
            <returns></returns>
        </member>
        <member name="M:Neon.HomeControl.Api.Core.Interfaces.IDtoMapper`2.ToDto(`0)">
            <summary>
            Transform single entity in DTO
            </summary>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:Neon.HomeControl.Api.Core.Interfaces.IDtoMapper`2.ToEntity(System.Collections.Generic.List{`1})">
            <summary>
            Transform List of DTOs in Entities
            </summary>
            <param name="dto"></param>
            <returns></returns>
        </member>
        <member name="M:Neon.HomeControl.Api.Core.Interfaces.IDtoMapper`2.ToEntity(`1)">
            <summary>
            Transform DTO in Entity
            </summary>
            <param name="dto"></param>
            <returns></returns>
        </member>
        <member name="T:Neon.HomeControl.Api.Core.Interfaces.PropertyChange.IBasePropertyChangedEntity">
            <summary>
                Interface for create Property Change Entity
            </summary>
        </member>
        <member name="T:Neon.HomeControl.Api.Core.Interfaces.ScriptEngine.IScriptEngine">
            <summary>
            Interface for creates Universal Script Engine
            </summary>
        </member>
        <member name="T:Neon.HomeControl.Api.Core.Interfaces.Services.ICommandDispatcherService">
            <summary>
            Dispatcher Service
            </summary>
        </member>
        <member name="M:Neon.HomeControl.Api.Core.Interfaces.Services.ICommandDispatcherService.DispatchCommand``1(``0,System.String,System.Object[])">
            <summary>
            Dispatch to component service
            </summary>
            <typeparam name="T"></typeparam>
            <param name="entity"></param>
            <param name="commandName"></param>
            <param name="args"></param>
        </member>
        <member name="P:Neon.HomeControl.Api.Core.Interfaces.Services.ICommandDispatcherService.CommandInfos">
            <summary>
            List of availables commands
            </summary>
        </member>
        <member name="T:Neon.HomeControl.Api.Core.Interfaces.Services.IDatabaseService">
            <summary>
            Database wrapper for DB Context
            </summary>
        </member>
        <member name="P:Neon.HomeControl.Api.Core.Interfaces.Services.IDatabaseService.GetDbContextForContainer">
            <summary>
            Type of DB Context
            </summary>
        </member>
        <member name="T:Neon.HomeControl.Api.Core.Interfaces.Services.IIoTService">
            <summary>
                Service for save Entities status
            </summary>
        </member>
        <member name="M:Neon.HomeControl.Api.Core.Interfaces.Services.IIoTService.InsertEntity``1(``0)">
            <summary>
                Insert new entity in IoT database
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Neon.HomeControl.Api.Core.Interfaces.Services.IIoTService.GetEntities">
            <summary>
            Get all Entities
            </summary>
            <returns></returns>
        </member>
        <member name="M:Neon.HomeControl.Api.Core.Interfaces.Services.IIoTService.Update``1(``0)">
            <summary>
                Update Entity
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Neon.HomeControl.Api.Core.Interfaces.Services.IIoTService.Query``1">
            <summary>
                Get Queryable object
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Neon.HomeControl.Api.Core.Interfaces.Services.IIoTService.FindById``1(System.Guid)">
            <summary>
                Select entity from ID
            </summary>
            <typeparam name="T"></typeparam>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Neon.HomeControl.Api.Core.Interfaces.Services.IIoTService.InsertOrUpdate``1(``0)">
            <summary>
                Check if entity exists and add or update
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Neon.HomeControl.Api.Core.Interfaces.Services.IIoTService.GetEventStream``1">
            <summary>
                Subscribing to this event it is possible to receive entity modifications
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Neon.HomeControl.Api.Core.Interfaces.Services.IIoTService.InsertEvent``1(``0)">
            <summary>
             Insert event and save in entities database
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Neon.HomeControl.Api.Core.Interfaces.Services.IIoTService.Publish``1(``0)">
            <summary>
                Publish event modification
            </summary>
            <typeparam name="T"></typeparam>
            <param name="event"></param>
        </member>
        <member name="T:Neon.HomeControl.Api.Core.Interfaces.Services.IPluginsManager">
            <summary>
            Interface for create plugins manager service
            </summary>
        </member>
        <member name="T:Neon.HomeControl.Api.Core.Interfaces.Services.IRoutineService">
            <summary>
            Service for create/save routines
            </summary>
        </member>
        <member name="M:Neon.HomeControl.Api.Core.Interfaces.Services.IRoutineService.AddRoutine(System.String,System.Action)">
            <summary>
            Add routine
            </summary>
            <param name="name"></param>
            <param name="action"></param>
            <returns></returns>
        </member>
        <member name="M:Neon.HomeControl.Api.Core.Interfaces.Services.IRoutineService.ExecuteRoutine(System.String)">
            <summary>
            Execute a routine
            </summary>
            <param name="name"></param>
        </member>
        <member name="P:Neon.HomeControl.Api.Core.Interfaces.Services.IRoutineService.RoutineNames">
            <summary>
            Get routine names
            </summary>
        </member>
        <member name="T:Neon.HomeControl.Api.Core.Interfaces.Services.IRuleEngineService">
            <summary>
            Rules engine service
            </summary>
        </member>
        <member name="M:Neon.HomeControl.Api.Core.Interfaces.Services.IRuleEngineService.AddRule(System.String,System.Type,System.String,System.Action{Neon.HomeControl.Api.Core.Interfaces.IoTEntities.IIotEntity})">
            <summary>
            Add rule with string condition with Lambda parser
            </summary>
            <param name="ruleName"></param>
            <param name="condition"></param>
            <param name="action"></param>
        </member>
        <member name="M:Neon.HomeControl.Api.Core.Interfaces.Services.IRuleEngineService.AddRule(System.String,System.Type,System.Func{Neon.HomeControl.Api.Core.Interfaces.IoTEntities.IIotEntity,System.Boolean},System.Action{Neon.HomeControl.Api.Core.Interfaces.IoTEntities.IIotEntity})">
            <summary>
            Add rule with function boolean 
            </summary>
            <param name="ruleName"></param>
            <param name="condition"></param>
            <param name="action"></param>
        </member>
        <member name="M:Neon.HomeControl.Api.Core.Interfaces.Services.IRuleEngineService.AddRule(System.String,System.Type,System.String,NLua.LuaFunction)">
            <summary>
            Add rule with string condition for ScriptManager
            </summary>
            <param name="ruleName"></param>
            <param name="condition"></param>
            <param name="action"></param>
        </member>
        <member name="P:Neon.HomeControl.Api.Core.Interfaces.Services.IRuleEngineService.Rules">
            <summary>
            Get all rules
            </summary>
        </member>
        <member name="T:Neon.HomeControl.Api.Core.Interfaces.Services.ISchedulerService">
            <summary>
                Interface for create Scheduler service
            </summary>
        </member>
        <member name="P:Neon.HomeControl.Api.Core.Interfaces.Services.ISchedulerService.JobsInfo">
            <summary>
                Return all job information
            </summary>
        </member>
        <member name="M:Neon.HomeControl.Api.Core.Interfaces.Services.ISchedulerService.AddJob(System.Action,System.Int32,System.Boolean)">
            <summary>
                Add job with seconds
            </summary>
            <param name="job"></param>
            <param name="seconds"></param>
            <param name="startNow"></param>
        </member>
        <member name="T:Neon.HomeControl.Api.Core.Interfaces.Services.IService">
            <summary>
                Interface for create System Services
            </summary>
        </member>
        <member name="M:Neon.HomeControl.Api.Core.Interfaces.Services.IService.Start">
            <summary>
                Start service from <see cref="T:Neon.HomeControl.Api.Core.Interfaces.Managers.IServicesManager" />
            </summary>
            <returns></returns>
        </member>
        <member name="M:Neon.HomeControl.Api.Core.Interfaces.Services.IService.Stop">
            <summary>
                Stop service from <see cref="T:Neon.HomeControl.Api.Core.Interfaces.Managers.IServicesManager" />
            </summary>
            <returns></returns>
        </member>
        <member name="M:Neon.HomeControl.Api.Core.Managers.ComponentsService.StartComponent(System.String)">
            <summary>
            Start component
            </summary>
            <param name="componentId"></param>
            <returns></returns>
        </member>
        <member name="T:Neon.HomeControl.Api.Core.Mapper.DefaultMapperProfile">
            <summary>
            Default automapper scanning profile
            </summary>
        </member>
        <member name="M:Neon.HomeControl.Api.Core.Mapper.DefaultMapperProfile.#ctor">
            <summary>
            ctor
            </summary>
        </member>
        <member name="T:Neon.HomeControl.Api.Core.Utils.AssemblyUtils">
            <summary>
                Class for manage assemblies
            </summary>
        </member>
        <member name="M:Neon.HomeControl.Api.Core.Utils.AssemblyUtils.GetTypesWithCustomAttribute(System.Reflection.Assembly,System.Type)">
            <summary>
            </summary>
            <param name="assembly"></param>
            <param name="attributeType"></param>
            <returns></returns>
        </member>
        <member name="M:Neon.HomeControl.Api.Core.Utils.AssemblyUtils.GetType(System.String)">
            <summary>
                Restituisce il tipo controllando tutti gli assembly
            </summary>
            <param name="typeName"></param>
            <returns></returns>
        </member>
        <member name="M:Neon.HomeControl.Api.Core.Utils.AssemblyUtils.GetTypesImplentInterface(System.Type)">
            <summary>
                Controlla tutti gli se implementano una interfaccia
            </summary>
            <param name="customInterface"></param>
            <returns></returns>
        </member>
        <member name="M:Neon.HomeControl.Api.Core.Utils.AssemblyUtils.ScanAllAssembliesFromAttribute(System.Type)">
            <summary>
                Prende tutt gli assembly (*.dll) da un attributo
            </summary>
            <param name="attribute"></param>
            <returns></returns>
        </member>
        <member name="M:Neon.HomeControl.Api.Core.Utils.AssemblyUtils.GetAppAssemblies">
            <summary>
                Prende gli assembly dell'applicazione
            </summary>
            <returns></returns>
        </member>
        <member name="M:Neon.HomeControl.Api.Core.Utils.AssemblyUtils.ScanAssembly(System.Type,System.String,System.String)">
            <summary>
                Controlla tutti gli assembly se hanno l'attributo
            </summary>
            <param name="attribute"></param>
            <param name="filter"></param>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:Neon.HomeControl.Api.Core.Utils.AssemblyUtils.GetPropertiesFromAttribute(System.Type,System.Type)">
            <summary>
                Prende gli attributi di un tipo
            </summary>
            <param name="type"></param>
            <param name="attribute"></param>
            <returns></returns>
        </member>
        <member name="M:Neon.HomeControl.Api.Core.Utils.AssemblyUtils.GetVersion">
            <summary>
                Prende la versione
            </summary>
            <returns></returns>
        </member>
        <member name="M:Neon.HomeControl.Api.Core.Utils.AssemblyUtils.GetProductName">
            <summary>
                Prende il nome del prodotto
            </summary>
            <returns></returns>
        </member>
        <member name="M:Neon.HomeControl.Api.Core.Utils.AssemblyUtils.AddAssemblyToCache(System.Reflection.Assembly)">
            <summary>
                Aggiunge un assembly alla cache
            </summary>
            <param name="assembly"></param>
        </member>
        <member name="M:Neon.HomeControl.Api.Core.Utils.AssemblyUtils.IsDebug">
            <summary>
                Se debug
            </summary>
            <returns></returns>
        </member>
        <member name="T:Neon.HomeControl.Api.Core.Utils.HashUtils">
            <summary>
            Utility class for SHA1 Hash
            </summary>
        </member>
        <member name="M:Neon.HomeControl.Api.Core.Utils.HashUtils.HashSha1(System.String)">
            <summary>
            Hash input string
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="T:Neon.HomeControl.Api.Core.Utils.JsonUtils">
            <summary>
                Extension class for Serialize/Deserialize JSON
            </summary>
        </member>
        <member name="M:Neon.HomeControl.Api.Core.Utils.JsonUtils.ToJson(System.Object)">
            <summary>
                Serialize object to string
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Neon.HomeControl.Api.Core.Utils.JsonUtils.FromJson(System.String,System.Type)">
            <summary>
                Parse string to Type
            </summary>
            <param name="obj"></param>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Neon.HomeControl.Api.Core.Utils.JsonUtils.FromJson``1(System.String)">
            <summary>
                Parse string to Generic
            </summary>
            <typeparam name="T"></typeparam>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Neon.HomeControl.Api.Core.Utils.MethodsUtils.FlattenException(System.Exception)">
            <summary>
            Return flatten Exception
            </summary>
            <param name="exception"></param>
            <returns></returns>
        </member>
        <member name="T:Neon.HomeControl.Api.Core.Utils.NotificationExtensions">
            <summary>
                Extension for subscribe to Notification
            </summary>
        </member>
        <member name="T:Neon.HomeControl.Api.Core.Utils.NotificationExtensions.PropertyChangedHandler`1">
            <summary>
                A property changed handler without the property name.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="sender">The object that raised the event.</param>
        </member>
        <member name="M:Neon.HomeControl.Api.Core.Utils.NotificationExtensions.Notify(System.ComponentModel.PropertyChangedEventHandler,System.Linq.Expressions.Expression{System.Func{System.Object}})">
            <summary>
                Notifies listeners about a change.
            </summary>
            <param name="EventHandler">The event to raise.</param>
            <param name="Property">The property that changed.</param>
        </member>
        <member name="M:Neon.HomeControl.Api.Core.Utils.NotificationExtensions.SubscribeToChange``1(``0,System.Linq.Expressions.Expression{System.Func{System.Object}},Neon.HomeControl.Api.Core.Utils.NotificationExtensions.PropertyChangedHandler{``0})">
            <summary>
                Subscribe to changes in an object implementing INotifiyPropertyChanged.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="ObjectThatNotifies">The object you are interested in.</param>
            <param name="Property">The property you are interested in.</param>
            <param name="Handler">The delegate that will handle the event.</param>
        </member>
        <member name="T:Neon.HomeControl.Api.Core.Utils.OAuth2">
            <summary>
                A simple C# OAuth2 auth-code wrapper library.
            </summary>
        </member>
        <member name="M:Neon.HomeControl.Api.Core.Utils.OAuth2.CreateRedirect(Neon.HomeControl.Api.Core.Utils.OAuth2Provider,System.String,System.String)">
            <summary>
                Construct a OAuth2 forwarding URI to redirect with.
            </summary>
            <param name="provider">OAuth2 provider wrapper.</param>
            <param name="redirectUri">URI to redirect back to the system.</param>
            <param name="locale">Language locale for provider interface.</param>
            <returns>URI to redirect system to, for user authorization.</returns>
        </member>
        <member name="M:Neon.HomeControl.Api.Core.Utils.OAuth2.AuthenticateByCode(Neon.HomeControl.Api.Core.Utils.OAuth2Provider,System.String,System.String)">
            <summary>
                Request a access token by exchanging a auth code.
            </summary>
            <param name="provider">OAuth2 provider wrapper.</param>
            <param name="redirectUri">URI to redirect back to the system.</param>
            <param name="code">Authorization code.</param>
            <returns>Authentication response object.</returns>
        </member>
        <member name="M:Neon.HomeControl.Api.Core.Utils.OAuth2.AuthenticateByToken(Neon.HomeControl.Api.Core.Utils.OAuth2Provider,System.String)">
            <summary>
                Request a new access token by refreshing an old.
            </summary>
            <param name="provider">OAuth2 provider wrapper.</param>
            <param name="refreshToken">Access/refresh token to use.</param>
            <returns>Authentication response object.</returns>
        </member>
        <member name="M:Neon.HomeControl.Api.Core.Utils.OAuth2.GetUserInfo(Neon.HomeControl.Api.Core.Utils.OAuth2Provider,System.String)">
            <summary>
                Get user info from the providers user endpoint.
            </summary>
            <param name="provider">OAuth2 provider wrapper.</param>
            <param name="accessToken">Access token to use.</param>
            <returns>Raw data from the provider.</returns>
        </member>
        <member name="M:Neon.HomeControl.Api.Core.Utils.OAuth2.buildQueryString(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
                Construct a query-string from dictionary.
            </summary>
            <param name="parameters">Set of parameters in dictionary form to construct from.</param>
            <returns>Query-string.</returns>
        </member>
        <member name="M:Neon.HomeControl.Api.Core.Utils.OAuth2.interpretReply(System.String)">
            <summary>
                Interpret the reply from the auth-call.
            </summary>
            <param name="reply">The string body from the web-request.</param>
            <returns>Authentication response object.</returns>
        </member>
        <member name="M:Neon.HomeControl.Api.Core.Utils.OAuth2.request(System.String,System.String,System.String)">
            <summary>
                Make a web-request and return response string.
            </summary>
            <param name="uri">URI to contact.</param>
            <param name="method">HTTP method to use.</param>
            <param name="payload">Payload to deliver via query-string or body.</param>
            <returns>Response from web-request.</returns>
        </member>
        <member name="T:Neon.HomeControl.Api.Core.Utils.OAuth2Provider">
            <summary>
                OAuth2 provider wrapper.
            </summary>
        </member>
        <member name="T:Neon.HomeControl.Api.Core.Utils.OAuth2AuthenticateResponse">
            <summary>
                Authentication response object.
            </summary>
        </member>
        <member name="T:Neon.HomeControl.Api.Core.Utils.PortScanner">
            <summary>
                Use Sockets to Scan the Ports on a Machine.
            </summary>
            <remarks>
                From the Oreilly C# 6.0 Cookbook
                https://github.com/oreillymedia/c_sharp_6_cookbook
                http://shop.oreilly.com/product/0636920037347.do
            </remarks>
        </member>
        <member name="T:Neon.HomeControl.Api.Core.Utils.TaskPool">
            <summary>
                Threadpool class that help you to execute async task in pool
            </summary>
            <remarks>
                https://gist.github.com/OmidID/da234a6cfbacebbd46defdb71c6cf95e
            </remarks>
        </member>
        <member name="M:Neon.HomeControl.Api.Core.Utils.TaskPool.#ctor(System.Int32)">
            <summary>
                Creates a new thread queue with a maximum number of threads
            </summary>
            <param name="threadsMaxCount">The maximum number of currently threads</param>
        </member>
        <member name="M:Neon.HomeControl.Api.Core.Utils.TaskPool.#ctor(System.Int32,System.Func{System.Threading.Tasks.Task}[])">
            <summary>
                Creates a new thread queue with a maximum number of threads and the tasks that should be executed.
            </summary>
            <param name="threadsMaxCount">The maximum number of currently threads.</param>
            <param name="tasks">The tasks that will be execut in pool.</param>
        </member>
        <member name="E:Neon.HomeControl.Api.Core.Utils.TaskPool.Completed">
            <summary>
                Raised when all tasks have been completed.
            </summary>
        </member>
        <member name="M:Neon.HomeControl.Api.Core.Utils.TaskPool.Enqueue(System.Func{System.Threading.Tasks.Task})">
            <summary>
                Adds a task and runs it if free thread exists. Otherwise enqueue.
            </summary>
            <param name="task">The task that will be execut</param>
        </member>
        <member name="M:Neon.HomeControl.Api.Core.Utils.TaskPool.Enqueue``1(System.Func{System.Threading.Tasks.Task{``0}})">
            <summary>
                Adds a task and runs it if free thread exists. Otherwise enqueue.
            </summary>
            <param name="task">The task that will be executed</param>
        </member>
        <member name="M:Neon.HomeControl.Api.Core.Utils.TaskPool.StartTask(Neon.HomeControl.Api.Core.Utils.TaskPool.IInternalTask)">
            <summary>
                Starts the execution of a task.
            </summary>
            <param name="task">The task that should be executed.</param>
        </member>
        <member name="M:Neon.HomeControl.Api.Core.Utils.TaskPool.CheckQueue">
            <summary>
                Checks if the queue contains tasks and runs as many as there are free execution slots.
            </summary>
        </member>
        <member name="M:Neon.HomeControl.Api.Core.Utils.TaskPool.OnCompleted">
            <summary>
                Raises the Completed event.
            </summary>
        </member>
    </members>
</doc>
